Parameters:
  TaskName:
    Type: String
    Description: "The task name for running your application"

  TaskCompatability:
    Type: String
    Description: "Capacity provider. EC2 or Fargate"
    AllowedValues:
      - "EC2"
      - "FARGATE"
    Default: "EC2"

  ContainerImage:
    Type: String
    Description: "Docker image to run on the container"
    Default: hmoon630/sample-fastapi

  TaskCPU:
    Type: Number
    Description: "vCPU allocation of the container"
    Default: 256

  TaskMemory:
    Type: Number
    Description: "Memory allocation of the container"
    Default: 512

  ContainerArguments:
    Type: CommaDelimitedList
    Description: "(Optional) Docker CMD arguments. Spaces in string are trimmed"

  HealthcheckCommand:
    Type: String
    Description: "Select healthcheck command. curl or wget is required for the image"
    AllowedValues:
      - wget
      - curl
    Default: curl

  HealthCheckEndpoint:
    Type: String
    Description: "Helath check endpoint"
    Default: "/healthcheck"

  ContainerPort:
    Type: Number
    Description: "Port number of the container"
    Default: 8080

  LogDriver:
    Type: String
    Description: "Log driver which delivers logs to CloudWatch"
    AllowedValues:
      - "awslogs"
      - "awsfirelens"
    Default: awslogs

  Project:
    Type: String
    Description: "The project name for provisioned this resources"
    Default: wsi

  Owner:
    Type: String
    Description: "The team name for owned this resources"
    Default: hmoon

Conditions:
  ArgumentsExist: !Not [!Equals [!Select ["0", !Ref ContainerArguments], ""]]
  UsingCurl: !Equals [!Ref HealthcheckCommand, "curl"]
  IsFargate: !Equals [!Ref TaskCompatability, "FARGATE"]
  IsFirelens: !Equals [!Ref LogDriver, "awsfirelens"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Task Configuration"
        Parameters:
          - TaskName
          - TaskCompatability
          - ContainerImage
          - TaskCPU
          - TaskMemory
          - ContainerArguments
          - LogDriver
      - Label:
          default: "Healthcheck Configuration"
        Parameters:
          - HealthcheckCommand
          - HealthCheckEndpoint
          - ContainerPort
      - Label:
          default: "Tag configuration"
        Parameters:
          - Project
          - Owner

Resources:
  #
  # IAM Role (for TaskExecutionRole)
  #
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TaskName}-execution-role"
      Description: !Sub "The task execution role for ${TaskName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  #
  # IAM Role (for TaskRole)
  #
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TaskName}-role"
      Description: !Sub "The task role for ${TaskName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies: !If
        - IsFirelens
        - - PolicyName: firelens
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:DescribeLogGroups"
                    - "logs:DescribeLogStreams"
                  Resource: "*"
        - []

      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  #
  # CloudwatchLogs - Log Group
  #
  CloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/ecs/application/${TaskName}"
      RetentionInDays: 14

  #
  # ECS - Task Definition
  #
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      Family: !Ref TaskName
      RequiresCompatibilities:
        - !Ref TaskCompatability
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      # Volumes:
      #   - Name: log_volume
      #     EFSVolumeConfiguration:
      #       FilesystemId: FILE_SYSTEM
      #       RootDirectory: /
      #       AuthorizationConfig:
      #         IAM: ENABLED
      #         AccessPointId: ACCESS_POINT
      #       TransitEncryption: ENABLED
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref TaskName
          Image: !Ref ContainerImage
          Cpu: !Ref TaskCPU
          Memory: !Ref TaskMemory
          Command: !If [ArgumentsExist, !Ref ContainerArguments, []]
          Essential: true
          Privileged: false
          # MountPoints:
          #   - ContainerPath: /var/log
          #     ReadOnly: false
          #     SourceVolume: log_volume
          # Secrets:
          #   - Name: credential
          #     ValueFrom: SECRET_ARN
          # Environment:
          #   - Name: region
          #     Value: !Ref AWS::Region
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - !If
                - UsingCurl
                - !Sub "curl --silent http://localhost:${ContainerPort}${HealthCheckEndpoint} || exit 1"
                - !Sub "wget --no-verbose --tries=1 --spider http://localhost:${ContainerPort}${HealthCheckEndpoint} || exit 1"
            Interval: 10
            Retries: 3
            Timeout: 5
            StartPeriod: 10
          LogConfiguration: !If
            - IsFirelens
            - LogDriver: awsfirelens
              Options:
                Name: cloudwatch
                region: !Ref AWS::Region
                log_group_name: !Ref CloudwatchLogGroup
                log_stream_name: "$(ecs_task_id)"
                log_key: log
            - LogDriver: awslogs
              Options:
                awslogs-group: !Ref CloudwatchLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix:
                  !If [IsFargate, !Ref TaskName, !Ref AWS::NoValue]
        - !If
          - IsFirelens
          - Name: log_router
            Image: public.ecr.aws/aws-observability/aws-for-fluent-bit:stable
            Essential: true
            FirelensConfiguration:
              Type: fluentbit
              Options:
                enable-ecs-log-metadata: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: /ecs/firelens
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: firelens
                awslogs-create-group: true
          - !Ref AWS::NoValue
