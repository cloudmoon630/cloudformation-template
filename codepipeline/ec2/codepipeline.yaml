Parameters:
  CodePipelineName:
    Description: "The name of the pipeline"
    Type: String

  ArtifactBucketName:
    Description: "The bucket name for artifacts"
    Type: String

  CodeCommitRepositoryName:
    Description: "The repository name of codecommit"
    Type: String

  CodeCommitBranchName:
    Description: "The branch name of codecommit"
    Type: String
    Default: main

  CodeBuildProjectName:
    Description: "The project name of codebuild"
    Type: String

  CodeDeployApplicationName:
    Description: "The application name of codedeploy"
    Type: String

  CodeDeployDeploymentGroupName:
    Description: "The deployment group name of codedeploy"
    Type: String

  AutoScalingGroup:
    Description: "The name of auto scaling group"
    Type: String

  TargetGroupName:
    Description: "The name of target group"
    Type: String

  CodeCommitCreation:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  CodeBuildStageCreation:
    Type: String
    Description: If no, build stage will be skipped and source artifacts are deployed.
    AllowedValues:
      - "Yes"
      - "No"

  CodeBuildCreation:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  CodeDeployCreation:
    Type: String
    Description: Applied only for Blue/Green
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  CodeDeployDeploymentType:
    Type: String
    Description: CodeDeploy action type.
    AllowedValues:
      - "Blue/green"
      - "In-place"

Conditions:
  CreateCodeCommit: !Equals [!Ref CodeCommitCreation, "Yes"]
  CreateCodeBuild: !And
    - !Equals [!Ref CodeBuildCreation, "Yes"]
    - !Equals [!Ref CodeBuildStageCreation, "Yes"]
  CreateCodeDeploy: !Equals [!Ref CodeDeployCreation, "Yes"]
  SkipCodeBuild: !Equals [!Ref CodeBuildStageCreation, "No"]
  CreateCodeDeployDeploymentGroup: !And
    - !Equals [!Ref CodeDeployCreation, "Yes"]
    - !Equals [!Ref CodeDeployDeploymentType, "In-place"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Pipeline Configuration"
        Parameters:
          - CodePipelineName
          - ArtifactBucketName
      - Label:
          default: "Commit Configuration"
        Parameters:
          - CodeCommitCreation
          - CodeCommitRepositoryName
          - CodeCommitBranchName
      - Label:
          default: "Build Configuration"
        Parameters:
          - CodeBuildStageCreation
          - CodeBuildCreation
          - CodeBuildProjectName
      - Label:
          default: "Deploy Configuration"
        Parameters:
          - CodeDeployDeploymentType
          - CodeDeployCreation
          - AutoScalingGroup
          - TargetGroupName
          - CodeDeployApplicationName
          - CodeDeployDeploymentGroupName

Resources:
  #
  # CodeCommit - Repository
  #
  CodeCommitRepository:
    Condition: CreateCodeCommit
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeCommitRepositoryName

  #
  # Codebuild - Project
  #
  CodeBuildProject:
    Condition: CreateCodeBuild
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
        Type: LINUX_CONTAINER
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}"
      SourceVersion: !Sub "refs/heads/${CodeCommitBranchName}"
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Artifacts:
        Type: NO_ARTIFACTS
      ServiceRole: !GetAtt CodeBuildRole.Arn

  #
  # CodeDeploy - Application
  #
  CodeDeployApplication:
    Condition: CreateCodeDeploy
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref CodeDeployApplicationName
      ComputePlatform: Server

  #
  # CodeDeploy - Deployment Group
  #
  CodeDeployDeploymentGroup:
    Condition: CreateCodeDeployDeploymentGroup
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Ref CodeDeployDeploymentGroupName
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !Ref TargetGroupName
      DeploymentConfigName: CodeDeployDefault.HalfAtATime
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn

  #
  # Codepipeline - Pipeline
  #
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactBucketName
        Type: S3
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref CodeCommitBranchName
                RepositoryName: !Ref CodeCommitRepositoryName
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - !If
          - SkipCodeBuild
          - !Ref AWS::NoValue
          - Name: Build
            Actions:
              - Name: BuildAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                Configuration:
                  ProjectName: !Ref CodeBuildProjectName
                InputArtifacts:
                  - Name: SourceOutput
                OutputArtifacts:
                  - Name: BuildOutput
                RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplicationName
                DeploymentGroupName: !Ref CodeDeployDeploymentGroupName
              InputArtifacts:
                - Name: !If
                    - SkipCodeBuild
                    - SourceOutput
                    - BuildOutput
              RunOrder: 1

  #
  # EventBridge - Rule
  #
  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref CodeCommitBranchName
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineName}"
          RoleArn: !GetAtt EventBridgeRole.Arn
          Id: !Ref CodePipelineName

  #
  # CodeBuild Role
  #
  CodeBuildRole:
    Condition: CreateCodeBuild
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codebuild-${CodeBuildProjectName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: codebuild-default-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}"
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}:*"
              - Sid: s3
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${ArtifactBucketName}"
                  - !Sub "arn:${AWS::Partition}:s3:::${ArtifactBucketName}/*"
              - Sid: codecommit
                Effect: Allow
                Action:
                  - "codecommit:GitPull"
                Resource: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}"
              - Sid: ecr
                Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                Resource: "*"

  #
  # IAM Role
  #
  CodeDeployRole:
    Condition: CreateCodeDeploy
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codedeploy-${CodeDeployApplicationName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codedeploy.amazonaws.com
      Policies:
        - PolicyName: ec2-blue-green-deploy-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RunInstance
                Effect: Allow
                Action:
                  - "ec2:RunInstances"
                  - "ec2:CreateTags"
                Resource: "*"
              - Sid: PassRole
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  #
  # CodePipeline Role
  #
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codepipeline-${CodePipelineName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: codepipeline-default-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: passrole
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - "ec2.amazonaws.com"
                Resource: "*"
              - Sid: codecommit
                Effect: Allow
                Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetRepository"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource: "*"
              - Sid: codebuild
                Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
              - Sid: codedeploy
                Effect: Allow
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
              - Sid: infrastructure
                Effect: Allow
                Action:
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                Resource: "*"

  #
  # IAM Role (for EventBridge Rule)
  #
  EventBridgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "eventbridge-${CodePipelineName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: eventbridge-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "codepipeline:StartPipelineExecution"
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineName}"
